from abc import ABCMeta, abstractmethod
import uuid
import org.python.google.common.base.objects as objects #not sure if this is the same as com.google.common.base.Objects in JAVA code

class OpenmrsObject(object):
    """This is the base interface for all OpenMRS-defined classes"""
    
    __metaclass__ = ABCMeta

    @abstractmethod
    def getId(self):
    """return id - The unique Identifier for the object"""
        pass
    
    def setId(self, Id):
    """param id - The unique Identifier for the object"""
        pass
    
    def getUuid(self):
    """return the universally unique id for this object"""
        pass
    
    def setUuid(self, uuid):
    """param uuid a universally unique id for this object"""
        pass

class BaseOpenmrsObject(OpenmrsObject):
    def __init__(self):
        self.uuid = str(uuid4()) #generates a random uuid

    def getUuid(self):
        return self.uuid

    def setUuid(self, uuid):
        self.uuid = uuid

    def hashCode(self):
        if self.getUuid() == None:
            return hash(object) #im not sure if this serves the same purpose as "return super.hashCode();" in the JAVA code
        return hash(self.getUuid())

    def equals(self, obj):
        if self is obj:
            return True
        if not(isinstance(obj, BaseOpenmrsObject)):
            return False
        other = obj
        if self.getUuid() == None:
            return False
        return self.getUuid().equals(other.getUuid())

    def __str__(self):
        return "ClassName{hashCode= " + str(self.hashCode()) + "," + "uuid=" + str(self.uuid) + "}"
        
        
